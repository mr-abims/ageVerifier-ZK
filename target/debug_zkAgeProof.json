{"debug_symbols":[{"locations":{"1":[{"span":{"start":85,"end":95},"file":0}],"2":[{"span":{"start":85,"end":95},"file":0}],"3":[{"span":{"start":99,"end":116},"file":0}],"4":[{"span":{"start":99,"end":116},"file":0}],"5":[{"span":{"start":99,"end":116},"file":0}],"6":[{"span":{"start":99,"end":116},"file":0}],"7":[{"span":{"start":99,"end":116},"file":0}],"8":[{"span":{"start":99,"end":116},"file":0}],"9":[{"span":{"start":99,"end":116},"file":0}],"10":[{"span":{"start":99,"end":116},"file":0}],"11":[{"span":{"start":99,"end":116},"file":0}],"12":[{"span":{"start":99,"end":116},"file":0}],"13":[{"span":{"start":99,"end":116},"file":0}],"14":[{"span":{"start":85,"end":116},"file":0}],"15":[{"span":{"start":130,"end":139},"file":0}],"16":[{"span":{"start":130,"end":139},"file":0}],"17":[{"span":{"start":130,"end":139},"file":0}],"18":[{"span":{"start":130,"end":139},"file":0}],"19":[{"span":{"start":130,"end":139},"file":0}],"20":[{"span":{"start":209,"end":253},"file":0},{"span":{"start":291,"end":335},"file":23},{"span":{"start":589,"end":643},"file":23}],"21":[{"span":{"start":266,"end":292},"file":0}]}}],"file_map":{"0":{"source":"use dep::std;\n\nfn main(age: u32, birth_year: Field, ageHash: pub Field) {\n    assert(2024 - age == birth_year as u32);\n    assert(age >= 21);\n\n    // Check integrity of birth year hash\n    let computed_hash = std::hash::pedersen_commitment([birth_year]);\n    assert(computed_hash.x == ageHash);\n}\n\n#[test]\nfn test_main() {\n    let birth_hash = std::hash::pedersen_commitment([2000]);\n    std::println(birth_hash);\n    main(24, 2000, birth_hash.x);\n}\n","path":"/home/abims/Desktop/zkAgeProof/src/main.nr"},"23":{"source":"mod poseidon;\nmod mimc;\n\n#[foreign(sha256)]\npub fn sha256<N>(_input: [u8; N]) -> [u8; 32] {}\n\n#[foreign(blake2s)]\npub fn blake2s<N>(_input: [u8; N]) -> [u8; 32] {}\n\nstruct PedersenPoint {\n   x : Field,\n   y : Field,\n}\n\npub fn pedersen_commitment<N>(input: [Field; N]) -> PedersenPoint {\n    pedersen_commitment_with_separator(input, 0)\n}\n\n#[foreign(pedersen_commitment)]\npub fn __pedersen_commitment_with_separator<N>(_input: [Field; N], _separator: u32) -> [Field; 2] {}\n\npub fn pedersen_commitment_with_separator<N>(input: [Field; N], separator: u32) -> PedersenPoint {\n    let values = __pedersen_commitment_with_separator(input, separator);\n    PedersenPoint { x: values[0], y: values[1] }\n}\n\npub fn pedersen_hash<N>(input: [Field; N]) -> Field {\n    pedersen_hash_with_separator(input, 0)\n}\n\n#[foreign(pedersen_hash)]\npub fn pedersen_hash_with_separator<N>(_input: [Field; N], _separator: u32) -> Field {}\n\npub fn hash_to_field<N>(_input: [Field; N]) -> Field {\n    let mut inputs_as_bytes = [];\n\n    for i in 0..N {\n        let input_bytes = _input[i].to_le_bytes(32);\n        for i in 0..32 {\n            inputs_as_bytes = inputs_as_bytes.push_back(input_bytes[i]);\n        }\n    }\n\n    let hashed_input = blake2s(inputs_as_bytes);\n    crate::field::bytes32_to_field(hashed_input)\n}\n\n#[foreign(keccak256)]\npub fn keccak256<N>(_input: [u8; N], _message_size: u32) -> [u8; 32] {}\n\n","path":"std/hash.nr"}},"warnings":[]}